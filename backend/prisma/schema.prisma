// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum UserRole {
  CUSTOMER
  VENDOR
  DRIVER
  ADMIN
}

enum OrderStatus {
  RECEIVED       // Order received but not processed
  PROCESSING     // Order being processed by vendor
  PREPARING      // Parts being packaged
  READY_FOR_PICKUP // Ready for delivery or collection
  IN_TRANSIT     // Order on the way to customer
  DELIVERED      // Successfully delivered
  COLLECTED      // Successfully collected by customer
  CANCELLED      // Order cancelled
  RETURNED       // Order returned
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
  WALLET
}

enum PartCondition {
  NEW
  USED
  REFURBISHED
}

enum NotificationType {
  ORDER_STATUS
  PAYMENT
  PROMOTION
  SYSTEM
  MESSAGE
  REMINDER
}

// Base User model
model User {
  id             String      @id @default(uuid())
  email          String?     @unique
  phone          String      @unique
  passwordHash   String
  role           UserRole
  isVerified     Boolean     @default(false)
  isActive       Boolean     @default(true)
  lastLogin      DateTime?
  deviceToken    String?     // For push notifications
  
  // Relations based on role
  customer       Customer?
  vendor         Vendor?
  driver         Driver?
  admin          Admin?
  
  // Common relations
  notifications  Notification[]
  sentMessages   Message[]    @relation("SentMessages")
  receivedMessages Message[]  @relation("ReceivedMessages")
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([email])
  @@index([phone])
  @@index([role])
}

model Customer {
  id               String      @id @default(uuid())
  userId           String      @unique
  firstName        String
  lastName         String
  profileImage     String?
  
  // Relations
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles         Vehicle[]
  addresses        Address[]
  orders           Order[]
  reviews          Review[]
  wishlist         WishlistItem[]
  recentlyViewed   RecentlyViewed[]
  cart             CartItem[]
  paymentMethods   SavedPaymentMethod[]
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Vendor {
  id                String      @id @default(uuid())
  userId            String      @unique
  businessName      String
  description       String?     @db.Text
  logo              String?
  coverImage        String?
  businessAddress   String
  location          Json        // {latitude, longitude}
  contactEmail      String
  contactPhone      String
  operatingHours    Json        // {days: [{day: "Monday", open: "09:00", close: "17:00"}]}
  isVerified        Boolean     @default(false)
  specializations   String[]
  certifications    String[]
  averageRating     Float       @default(0)
  totalRatings      Int         @default(0)
  bankInfo          Json?       // For payments
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory         Part[]
  receivedOrders    Order[]
  reviews           Review[]
  promotions        Promotion[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([businessName])
  @@index([isVerified])
}

model Driver {
  id                String      @id @default(uuid())
  userId            String      @unique
  firstName         String
  lastName          String
  profileImage      String?
  vehicleType       String
  licensePlate      String
  color             String
  licenseNumber     String
  licenseImage      String
  idNumber          String
  idImage           String
  isVerified        Boolean     @default(false)
  isAvailable       Boolean     @default(false)
  currentLocation   Json?       // {latitude, longitude}
  serviceArea       Json?       // {radius, centerLat, centerLng}
  averageRating     Float       @default(0)
  totalRatings      Int         @default(0)
  bankInfo          Json?       // For payments
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveries        Delivery[]
  workingHours      WorkingHour[]
  earnings          Earning[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@index([isVerified])
  @@index([isAvailable])
}

model Admin {
  id                String      @id @default(uuid())
  userId            String      @unique
  firstName         String
  lastName          String
  permissions       Json        // {orders: true, users: true, settings: false, ...}
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Vehicle {
  id                String      @id @default(uuid())
  customerId        String
  make              String
  model             String
  year              Int
  vin               String?
  licensePlate      String?
  additionalDetails Json?       // Any other vehicle info
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([make, model, year])
  @@index([customerId])
}

model Category {
  id                String      @id @default(uuid())
  name              String      
  description       String?
  image             String?
  isActive          Boolean     @default(true)
  
  // Relations
  parentCategory    Category?   @relation("SubCategories", fields: [parentId], references: [id])
  parentId          String?
  subCategories     Category[]  @relation("SubCategories")
  parts             Part[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@unique([name, parentId]) // Allow same name in different parent categories
  @@index([parentId])
}

model Part {
  id                String        @id @default(uuid())
  vendorId          String
  categoryId        String
  name              String
  description       String?       @db.Text
  price             Float
  salePrice         Float?
  condition         PartCondition @default(NEW)
  brand             String?
  partNumber        String?
  quantity          Int           @default(0)
  images            String[]      // Array of image URLs
  specifications    Json?         // Detailed specs as JSON
  weight            Float?
  dimensions        Json?         // {length, width, height, unit}
  compatibleVehicles Json?        // [{make, model, yearStart, yearEnd}]
  isActive          Boolean       @default(true)
  averageRating     Float         @default(0)
  totalRatings      Int           @default(0)
  
  // Relations
  vendor            Vendor        @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  category          Category      @relation(fields: [categoryId], references: [id])
  orderItems        OrderItem[]
  reviews           Review[]
  wishlistItems     WishlistItem[]
  cartItems         CartItem[]
  recentlyViewed    RecentlyViewed[]
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([vendorId])
  @@index([categoryId])
  @@index([name])
  @@index([partNumber])
  @@index([isActive])
}

model Order {
  id                String      @id @default(uuid())
  customerId        String
  vendorId          String
  orderNumber       String      @unique
  status            OrderStatus @default(RECEIVED)
  subtotal          Float
  deliveryCharge    Float?
  tax               Float
  discount          Float       @default(0)
  total             Float
  notes             String?     @db.Text
  isDelivery        Boolean     @default(true)  // true = delivery, false = collection
  estimatedDelivery DateTime?   // Estimated delivery date/time
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id])
  vendor            Vendor      @relation(fields: [vendorId], references: [id])
  items             OrderItem[]
  payment           Payment?
  delivery          Delivery?
  statusUpdates     StatusUpdate[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([customerId])
  @@index([vendorId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id                String      @id @default(uuid())
  orderId           String
  partId            String
  quantity          Int
  unitPrice         Float
  subtotal          Float
  
  // Relations
  order             Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  part              Part        @relation(fields: [partId], references: [id])
  
  @@index([orderId])
  @@index([partId])
}

model StatusUpdate {
  id                String      @id @default(uuid())
  orderId           String
  status            OrderStatus
  description       String      @db.Text
  
  // Relations
  order             Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  
  @@index([orderId])
}

model Payment {
  id                String        @id @default(uuid())
  orderId           String        @unique
  amount            Float
  status            PaymentStatus @default(PENDING)
  method            PaymentMethod
  transactionId     String?
  paymentDetails    Json?         // Gateway specific details
  receipt           String?       // Receipt URL or identifier
  
  // Relations
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}

model SavedPaymentMethod {
  id                String        @id @default(uuid())
  customerId        String
  type              PaymentMethod
  isDefault         Boolean       @default(false)
  lastFour          String?       // Last 4 digits of card
  expiryDate        String?       // MM/YY format for cards
  cardType          String?       // Visa, Mastercard, etc.
  accountName       String?       // For bank accounts
  tokenizedData     String        // Encrypted payment details
  
  // Relations
  customer          Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  @@index([customerId])
}

model Delivery {
  id                String      @id @default(uuid())
  orderId           String      @unique
  driverId          String?
  addressId         String
  status            String      // ASSIGNED, PICKED_UP, IN_TRANSIT, DELIVERED, FAILED
  pickupTime        DateTime?
  deliveryTime      DateTime?
  estimatedArrival  DateTime?
  actualArrival     DateTime?
  notes             String?     @db.Text
  proofOfDelivery   String?     // Image URL or signature
  
  // Relations
  order             Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver            Driver?     @relation(fields: [driverId], references: [id])
  address           Address     @relation(fields: [addressId], references: [id])
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([orderId])
  @@index([driverId])
  @@index([status])
}

model Address {
  id                String      @id @default(uuid())
  customerId        String
  label             String      // e.g., "Home", "Work"
  fullName          String
  phoneNumber       String
  street            String
  city              String
  state             String
  postalCode        String
  country           String
  isDefault         Boolean     @default(false)
  location          Json?       // {latitude, longitude}
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  deliveries        Delivery[]
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([customerId])
}

model Review {
  id                String      @id @default(uuid())
  customerId        String
  vendorId          String?
  partId            String?
  orderId           String?     // Optional link to order
  rating            Int         // 1-5 stars
  comment           String?     @db.Text
  images            String[]    // Array of image URLs
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vendor            Vendor?     @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  part              Part?       @relation(fields: [partId], references: [id], onDelete: SetNull)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([customerId])
  @@index([vendorId])
  @@index([partId])
  @@index([orderId])
}

model Notification {
  id                String           @id @default(uuid())
  userId            String
  type              NotificationType
  title             String
  message           String
  image             String?
  isRead            Boolean          @default(false)
  data              Json?            // Additional data like orderId, etc.
  
  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime         @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([isRead])
}

model Message {
  id                String      @id @default(uuid())
  senderId          String
  receiverId        String
  content           String      @db.Text
  isRead            Boolean     @default(false)
  attachments       String[]    // URLs to any attached files
  
  // Relations
  sender            User        @relation("SentMessages", fields: [senderId], references: [id])
  receiver          User        @relation("ReceivedMessages", fields: [receiverId], references: [id])
  
  createdAt         DateTime    @default(now())
  
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model WishlistItem {
  id                String      @id @default(uuid())
  customerId        String
  partId            String
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  part              Part        @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  
  @@unique([customerId, partId]) // Prevent duplicates
  @@index([customerId])
  @@index([partId])
}

model RecentlyViewed {
  id                String      @id @default(uuid())
  customerId        String
  partId            String
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  part              Part        @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  
  @@unique([customerId, partId]) // Keep most recent view only
  @@index([customerId])
  @@index([partId])
}

model CartItem {
  id                String      @id @default(uuid())
  customerId        String
  partId            String
  quantity          Int         @default(1)
  
  // Relations
  customer          Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  part              Part        @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([customerId, partId]) // Prevent duplicates, update quantity instead
  @@index([customerId])
  @@index([partId])
}

model Promotion {
  id                String      @id @default(uuid())
  vendorId          String
  title             String
  description       String      @db.Text
  discountType      String      // PERCENTAGE, FIXED_AMOUNT
  discountValue     Float       // Value of discount (percentage or amount)
  startDate         DateTime
  endDate           DateTime
  minimumPurchase   Float?      // Minimum order value to apply promotion
  applicableParts   String[]    // Array of part IDs or empty for all
  isActive          Boolean     @default(true)
  promoCode         String?     @unique // Optional promo code for manual application
  image             String?     // Promotional image
  
  // Relations
  vendor            Vendor      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([vendorId])
  @@index([isActive])
  @@index([startDate, endDate])
  @@index([promoCode])
}

model WorkingHour {
  id                String      @id @default(uuid())
  driverId          String
  dayOfWeek         Int         // 0-6 (Sunday-Saturday)
  startTime         String      // Format: "HH:MM" 24-hour
  endTime           String      // Format: "HH:MM" 24-hour
  isActive          Boolean     @default(true)
  
  // Relations
  driver            Driver      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  @@unique([driverId, dayOfWeek]) // One entry per day per driver
  @@index([driverId])
}

model Earning {
  id                String      @id @default(uuid())
  driverId          String
  orderId           String?     // Can be null for bonuses/incentives
  amount            Float
  type              String      // DELIVERY_FEE, TIP, BONUS, etc.
  status            String      // PENDING, PAID
  payoutBatchId     String?     // For grouping multiple earnings in one payout
  description       String?
  
  // Relations
  driver            Driver      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([driverId])
  @@index([orderId])
  @@index([status])
  @@index([payoutBatchId])
}

model DriverPayout {
  id                String      @id @default(uuid())
  batchId           String      @unique  // For grouping multiple earnings
  totalAmount       Float
  driverCount       Int         // Number of drivers in this payout
  status            String      // PROCESSING, COMPLETED, FAILED
  paymentDetails    Json?       // Details of bank transfer or other payment method
  notes             String?     @db.Text
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([status])
}

model SystemConfig {
  id                String      @id @default(uuid())
  key               String      @unique
  value             String      @db.Text
  description       String?     @db.Text
  isPublic          Boolean     @default(false) // Whether visible to frontend
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model AuditLog {
  id                String      @id @default(uuid())
  userId            String?     // Can be null for system actions
  action            String
  entityType        String      // User, Order, Part, etc.
  entityId          String?
  oldValues         Json?       // Previous state
  newValues         Json?       // New state
  ipAddress         String?
  userAgent         String?     @db.Text
  
  createdAt         DateTime    @default(now())
  
  @@index([userId])
  @@index([entityType, entityId])
  @@index([action])
}

model SupportTicket {
  id                String      @id @default(uuid())
  userId            String
  type              String      // ACCOUNT, ORDER, PAYMENT, TECHNICAL, OTHER
  subject           String
  description       String      @db.Text
  status            String      // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority          String      // LOW, MEDIUM, HIGH, URGENT
  attachments       String[]    // Array of attachment URLs
  assignedTo        String?     // Admin user ID
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
}

model VerificationRequest {
  id                String      @id @default(uuid())
  userId            String
  type              String      // EMAIL, PHONE, IDENTITY, BUSINESS
  token             String      // Verification token or code
  expires           DateTime
  completed         Boolean     @default(false)
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@index([userId])
  @@index([token])
  @@index([completed])
}

// For part compatibility verification
model VehicleCompatibility {
  id                String      @id @default(uuid())
  make              String
  model             String
  yearStart         Int
  yearEnd           Int
  engineTypes       String[]    // Array of compatible engine types
  notes             String?     @db.Text
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@unique([make, model, yearStart, yearEnd])
  @@index([make, model])
}