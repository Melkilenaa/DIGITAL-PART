// This is a schema.prisma file for Digital Autospareparts Market Place Services (DAMPS)
// The schema covers all entities and relationships from the PRD

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management models
model User {
  id                  String            @id @default(uuid())
  phone               String?           @unique
  email               String?           @unique
  password            String
  role                UserRole
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  lastLogin           DateTime?
  pushNotificationToken String?
  resetToken          String?
  resetTokenExpiry    DateTime?
  customer            Customer?
  vendor              Vendor?
  driver              Driver?
  admin               Admin?
  notifications       Notification[]
  messages            Message[]         @relation("UserMessages")
  messagesSent        Message[]         @relation("SentMessages")
  deviceTokens        DeviceToken[]
  
  @@index([email, phone])
}

enum UserRole {
  CUSTOMER
  VENDOR
  DRIVER
  ADMIN
}

model DeviceToken {
  id          String   @id @default(uuid())
  token       String   @unique
  device      String?
  platform    String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

// Customer related models
model Customer {
  id                String            @id @default(uuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName         String
  lastName          String
  profileImage      String?
  addresses         Address[]
  vehicles          Vehicle[]
  orders            Order[]
  wishlistItems     WishlistItem[]
  reviews           Review[]
  recentlyViewed    RecentlyViewed[]
  paymentMethods    PaymentMethod[]
  
  @@index([userId])
}

model Address {
  id                String            @id @default(uuid())
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  name              String            // e.g., "Home", "Work"
  street            String
  city              String
  state             String
  country           String
  postalCode        String
  latitude          Float?
  longitude         Float?
  isDefault         Boolean           @default(false)
  phoneNumber       String?
  additionalInfo    String?
  orders            Order[]

  @@index([customerId])
}

model Vehicle {
  id                String            @id @default(uuid())
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  make              String
  model             String
  year              Int
  vin               String?
  licensePlate      String?
  engineType        String?
  transmissionType  String?
  additionalDetails Json?
  isDefault         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([customerId])
  @@index([make, model, year])
}

model WishlistItem {
  id                String            @id @default(uuid())
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  partId            String
  part              Part              @relation(fields: [partId], references: [id], onDelete: Cascade)
  addedAt           DateTime          @default(now())

  @@unique([customerId, partId])
  @@index([customerId])
  @@index([partId])
}

model RecentlyViewed {
  id                String            @id @default(uuid())
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  partId            String
  part              Part              @relation(fields: [partId], references: [id], onDelete: Cascade)
  viewedAt          DateTime          @default(now())

  @@unique([customerId, partId])
  @@index([customerId])
  @@index([partId])
  @@index([viewedAt])
}

model PaymentMethod {
  id                String            @id @default(uuid())
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  type              PaymentType
  provider          String            // e.g., "Visa", "Mastercard", "Bank"
  lastFourDigits    String?           // For cards
  expiryDate        String?           // For cards
  accountName       String?           // For bank accounts
  tokenizedDetails  String?           // Securely stored payment token from Flutterwave
  isDefault         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([customerId])
}

enum PaymentType {
  CARD
  BANK_TRANSFER
  CASH_ON_DELIVERY
  MOBILE_MONEY
}

// Vendor related models
model Vendor {
  id                String            @id @default(uuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName      String
  businessLogo      String?
  businessDescription String?
  phoneNumber       String
  email             String?
  address           String
  city              String
  state             String
  country           String
  postalCode        String?
  latitude          Float?
  longitude         Float?
  operatingHours    Json              // Store as JSON with day and hours
  specialHolidays   Json?             // Store as JSON with date and status
  isVerified        Boolean           @default(false)
  verificationDocuments Json?         // Store document URLs as JSON
  commissionRate    Float             @default(5.0)  // Default 5% commission
  rating            Float             @default(0)
  totalRatings      Int               @default(0)
  specializations   String[]          // Array of specializations
  certifications    String[]          // Array of certifications
  tags              String[]          // Array of tags for search
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  parts             Part[]
  orders            Order[]           // Orders handled by this vendor
  promotions        Promotion[]
  reviews           Review[]

  bankName          String?
  bankAccountName   String?
  bankAccountNumber String?

  totalEarnings     Float             @default(0)
  totalPaidOut      Float             @default(0)
  lastPayoutDate    DateTime?
  isPayoutEnabled   Boolean           @default(false)
  
  // Payout Requests Relation
  payoutRequests    PayoutRequest[]
  

  @@index([userId])
  @@index([businessName])
  @@index([city, state])
  @@index([isVerified])
  @@index([rating])
}

// Driver related models
model Driver {
  id                String            @id @default(uuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName         String
  lastName          String
  phoneNumber       String
  profileImage      String?
  vehicleType       String
  vehicleColor      String?
  licensePlate      String
  drivingLicense    String
  insuranceDocument String?
  identificationDoc String
  isVerified        Boolean           @default(false)
  isAvailable       Boolean           @default(false)
  latitude          Float?
  longitude         Float?
  rating            Float             @default(0)
  totalRatings      Int               @default(0)
  serviceAreas      Json?             // Store service area details as JSON
  workingHours      Json?             // Store working hours as JSON
  maxPackageSize    String?
  maxPackageWeight  Float?            // in kg
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deliveries        Delivery[]
  earnings          DriverEarning[]

  bankName          String?
  bankAccountName   String?
  bankAccountNumber String?

  totalEarnings     Float             @default(0)
  totalPaidOut      Float             @default(0)
  lastPayoutDate    DateTime?
  isPayoutEnabled   Boolean           @default(false)
  
  // Payout Requests Relation
  payoutRequests    PayoutRequest[]
  

  @@index([userId])
  @@index([isVerified, isAvailable])
  @@index([rating])
}

model DriverEarning {
  id                String            @id @default(uuid())
  driverId          String
  driver            Driver            @relation(fields: [driverId], references: [id], onDelete: Cascade)
  deliveryId        String            @unique
  delivery          Delivery          @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  amount            Float
  transactionFee    Float             @default(0)
  netAmount         Float
  isPaid            Boolean           @default(false)
  earningDate       DateTime          @default(now())
  paidDate          DateTime?
  transactionRef    String?
  
  @@index([driverId])
  @@index([isPaid])
  @@index([earningDate])
}

// Admin related models
model Admin {
  id                String            @id @default(uuid())
  userId            String            @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstName         String
  lastName          String
  permissionLevel   AdminPermission   @default(STANDARD)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  systemConfigs     SystemConfig[]
  
  @@index([userId])
  PayoutRequest PayoutRequest[]
}

enum AdminPermission {
  STANDARD
  ELEVATED
  SUPER_ADMIN
}

model SystemConfig {
  id                String            @id @default(uuid())
  key               String            @unique
  value             String
  description       String?
  adminId           String?           // Who last modified this config
  admin             Admin?            @relation(fields: [adminId], references: [id], onDelete: SetNull)
  updatedAt         DateTime          @updatedAt
}

// Product related models
model Category {
  id                String            @id @default(uuid())
  name              String            @unique
  description       String?
  image             String?
  parentId          String?           // For subcategories
  parent            Category?         @relation("SubCategories", fields: [parentId], references: [id])
  children          Category[]        @relation("SubCategories")
  parts             Part[]
  commissionRate    Float?            // Optional override of system default
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([parentId])
}

model Part {
  id                String            @id @default(uuid())
  name              String
  description       String?
  partNumber        String?
  barcode           String?           // For barcode scanning
  price             Float
  discountedPrice   Float?
  condition         PartCondition     @default(NEW)
  brand             String?
  images            String[]          // Array of image URLs
  stockQuantity     Int               @default(0)
  lowStockAlert     Int               @default(5)
  specifications    Json?             // Store part specs as JSON
  compatibleVehicles Json?            // Store compatibility as JSON
  weight            Float?            // in kg
  dimensions        String?           // Format: "LxWxH" in cm
  categoryId        String
  category          Category          @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  vendorId          String
  vendor            Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  tags              String[]          // Array of tags for search
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  orderItems        OrderItem[]
  wishlistItems     WishlistItem[]
  recentlyViewed    RecentlyViewed[]
  promotions        PartPromotion[]

  @@index([name])
  @@index([partNumber])
  @@index([barcode])
  @@index([categoryId])
  @@index([vendorId])
  @@index([condition])
  @@index([isActive])
  @@index([tags])
}

enum PartCondition {
  NEW
  USED
  REFURBISHED
  AFTERMARKET
  OEM
}

// Order related models
model Order {
  id                String            @id @default(uuid())
  orderNumber       String            @unique
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Restrict)
  vendorId          String
  vendor            Vendor            @relation(fields: [vendorId], references: [id], onDelete: Restrict)
  items             OrderItem[]
  subtotal          Float
  deliveryFee       Float             @default(0)
  tax               Float             @default(0)
  discount          Float             @default(0)
  total             Float
  paymentMethod     PaymentType
  paymentStatus     PaymentStatus     @default(PENDING)
  paymentReference  String?
  orderStatus       OrderStatus       @default(RECEIVED)
  orderType         OrderType         @default(DELIVERY)
  addressId         String?
  address           Address?          @relation(fields: [addressId], references: [id])
  notes             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  cancellationReason String?
  isCancelled       Boolean           @default(false)
  delivery          Delivery?
  refunds           Refund[]
  transactionFee    Float             @default(0)
  commissionAmount  Float             @default(0)
  vendorEarning     Float             @default(0)
  
  @@index([customerId])
  @@index([vendorId])
  @@index([orderStatus])
  @@index([paymentStatus])
  @@index([createdAt])
}

model OrderItem {
  id                String            @id @default(uuid())
  orderId           String
  order             Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  partId            String
  part              Part              @relation(fields: [partId], references: [id], onDelete: Restrict)
  quantity          Int
  unitPrice         Float
  subtotal          Float
  notes             String?
  
  @@index([orderId])
  @@index([partId])
}

enum OrderStatus {
  RECEIVED
  PROCESSING
  PREPARING
  READY_FOR_PICKUP
  IN_TRANSIT
  DELIVERED
  COLLECTED
  CANCELLED
  RETURNED
  DISPUTED
}

enum OrderType {
  DELIVERY
  COLLECTION
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Delivery {
  id                String            @id @default(uuid())
  orderId           String            @unique
  order             Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driverId          String?
  driver            Driver?           @relation(fields: [driverId], references: [id], onDelete: SetNull)
  status            DeliveryStatus    @default(PENDING)
  pickupTime        DateTime?
  deliveredTime     DateTime?
  estimatedDeliveryTime DateTime?
  startLatitude     Float?
  startLongitude    Float?
  destinationLatitude Float?
  destinationLongitude Float?
  currentLatitude   Float?
  currentLongitude  Float?
  distance          Float?            // in km
  deliveryFee       Float
  driverInstructions String?
  deliveryProof     String?           // URL to image or signature
  rating            Int?
  reviewComment     String?
  driverEarning     DriverEarning?
  
  @@index([orderId])
  @@index([driverId])
  @@index([status])
}

enum DeliveryStatus {
  PENDING
  ASSIGNED
  PICKUP_IN_PROGRESS
  PICKED_UP
  IN_TRANSIT
  ARRIVED
  DELIVERED
  FAILED
  CANCELLED
}

// Review system
model Review {
  id                String            @id @default(uuid())
  customerId        String
  customer          Customer          @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vendorId          String
  vendor            Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  rating            Int               // 1-5 star rating
  comment           String?
  images            String[]          // URLs to review images
  isVerifiedPurchase Boolean          @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  isHidden          Boolean           @default(false) // For admin moderation
  
  @@index([customerId])
  @@index([vendorId])
  @@index([rating])
  @@index([createdAt])
}

// Promotions and marketing
model Promotion {
  id                String            @id @default(uuid())
  vendorId          String
  vendor            Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  type              PromotionType
  discountValue     Float             // Percentage or fixed amount
  isPercentage      Boolean           @default(true)
  minimumOrderValue Float?
  startDate         DateTime
  endDate           DateTime
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  promotionCode     String?           @unique
  parts             PartPromotion[]
  
  @@index([vendorId])
  @@index([isActive])
  @@index([startDate, endDate])
  @@index([promotionCode])
}

model PartPromotion {
  id                String            @id @default(uuid())
  promotionId       String
  promotion         Promotion         @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  partId            String
  part              Part              @relation(fields: [partId], references: [id], onDelete: Cascade)
  
  @@unique([promotionId, partId])
  @@index([promotionId])
  @@index([partId])
}

enum PromotionType {
  DISCOUNT
  BUNDLE
  SPECIAL_OFFER
  CLEARANCE
  LOYALTY
  FEATURED
}

// Transaction models
model Transaction {
  id                String            @id @default(uuid())
  reference         String            @unique
  type              TransactionType
  amount            Float
  fee               Float             @default(0)
  status            TransactionStatus @default(PENDING)
  paymentMethod     PaymentType
  gatewayReference  String?           // Reference from payment gateway
  currency          String            @default("NGN")
  metadata          Json?
  orderId           String?
  customerId        String?
  vendorId          String?
  driverId          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  refunds           Refund[]
  payoutRequest     PayoutRequest?

  
  @@index([reference])
  @@index([type])
  @@index([status])
  @@index([createdAt])
}

enum TransactionType {
  PAYMENT
  REFUND
  PAYOUT
  ADJUSTMENT
  COMMISSION
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
  CANCELLED
}

model Refund {
  id                String            @id @default(uuid())
  orderId           String
  order             Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  transactionId     String
  transaction       Transaction       @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  amount            Float
  reason            String
  status            RefundStatus      @default(PENDING)
  approvedById      String?           // Admin who approved refund
  processedAt       DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@index([orderId])
  @@index([transactionId])
  @@index([status])
}

enum RefundStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
}

// Communication models
model Message {
  id                String            @id @default(uuid())
  senderId          String
  sender            User              @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId        String
  receiver          User              @relation("UserMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  content           String
  isRead            Boolean           @default(false)
  attachments       String[]          // URLs to attachments
  sentAt            DateTime          @default(now())
  readAt            DateTime?
  
  @@index([senderId])
  @@index([receiverId])
  @@index([sentAt])
}

model Notification {
  id                String            @id @default(uuid())
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              NotificationType
  title             String
  message           String
  data              Json?             // Additional data related to notification
  isRead            Boolean           @default(false)
  createdAt         DateTime          @default(now())
  readAt            DateTime?
  
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([isRead])
}

enum NotificationType {
  ORDER_STATUS
  PAYMENT
  PROMOTION
  SYSTEM
  DELIVERY
  INVENTORY
  PRICE_DROP
  REVIEW
}

// Analytics and reporting
model Analytics {
  id                String            @id @default(uuid())
  type              AnalyticsType
  data              Json
  period            String            // "daily", "weekly", "monthly"
  periodStart       DateTime
  periodEnd         DateTime
  createdAt         DateTime          @default(now())
  
  @@index([type])
  @@index([period])
  @@index([periodStart, periodEnd])
}

enum AnalyticsType {
  SALES
  ORDERS
  USERS
  INVENTORY
  DELIVERIES
  REVENUE
  PARTS_POPULARITY
  CATEGORY_PERFORMANCE
}

// System logs
model SystemLog {
  id                String            @id @default(uuid())
  action            String
  entityType        String?           // What type of entity was affected
  entityId          String?           // ID of the entity affected
  performedById     String?           // User who performed the action
  details           Json?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime          @default(now())
  
  @@index([action])
  @@index([entityType, entityId])
  @@index([performedById])
  @@index([createdAt])
}

model PayoutRequest {
  id                String            @id @default(uuid())
  userId            String            // Vendor or Driver ID
  userType          PayoutUserType
  amount            Float             // Requested payout amount
  status            PayoutStatus      @default(PENDING)
  
  // Banking Details
  bankName          String
  bankAccountName   String
  bankAccountNumber String
  
  // Audit and Tracking
  createdAt         DateTime          @default(now())
  processedAt       DateTime?
  processedById     String?           // Admin who processed the request
  processedBy       Admin?            @relation(fields: [processedById], references: [id])
  
  // Additional Details
  requestedEarnings Json?             // Detailed breakdown of earnings
  notes             String?           // Optional admin notes
   vendorId          String?
  vendor            Vendor?           @relation(fields: [vendorId], references: [id])
  driverId          String?
  driver            Driver?           @relation(fields: [driverId], references: [id])
  transactionId     String?           @unique
  transaction       Transaction?      @relation(fields: [transactionId], references: [id])
  
  @@index([userId])
  @@index([userType])
  @@index([status])

}

enum PayoutUserType {
  VENDOR
  DRIVER
}

enum PayoutStatus {
  PENDING
  APPROVED
  PROCESSED
  REJECTED
}